# .github/workflows/docker-publish.yml

name: Docker Build and Push

# Controls when the workflow will run
on:
  push:
    branches: [ main ] # Trigger on push events to the main branch
  workflow_dispatch: # Allows manual triggering from the Actions tab

jobs:
  build-and-push:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner

    permissions:
      contents: read # Needed to check out the repository

    steps:
      # 1. Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Set up QEMU for multi-platform builds (optional but good practice)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # 3. Set up Docker Buildx for advanced building features
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 4. Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }} # Use an Access Token, not your password

      # 5. Extract metadata (tags, labels) for Docker
      - name: Extract Docker metadata
        id: meta # Give this step an ID to reference its outputs
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/your-repo-name # IMPORTANT: Replace 'your-repo-name'
          tags: |
            type=sha # Tag with the Git commit SHA (short format)
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }} # Tag 'latest' only for main branch pushes

      # 6. Build and push the Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Build context is the root directory
          file: ./Dockerfile # Path to the Dockerfile
          push: ${{ github.event_name != 'pull_request' }} # Only push if it's not a pull request
          tags: ${{ steps.meta.outputs.tags }} # Use tags generated by the metadata step
          labels: ${{ steps.meta.outputs.labels }} # Use labels generated by the metadata step
          cache-from: type=gha # Enable build cache from GitHub Actions cache
          cache-to: type=gha,mode=max # Write build cache to GitHub Actions cache